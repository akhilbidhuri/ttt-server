{"version":3,"sources":["datastore/store.js","datastore/reducer.js","datastore/actions.js","API/apis.js","Components/input.js","Components/loader.js","Components/results.js","App.js","serviceWorker.js","index.js"],"names":["store","createStore","state","arguments","length","undefined","request","result","action","type","console","log","Object","objectSpread","payload","apis","n","dispatch","axios","method","url","baseUrl","headers","data","then","res","catch","err","inputs","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submit","input","current","value","test","setState","api","React","createRef","react_default","a","createElement","className","style","marginTop","ref","marginBottom","width","minHeight","fontSize","background","border","textAlign","onClick","marginLeft","paddingLeft","paddingRight","borderRadius","color","Component","loader","react_loader_spinner_default","height","results","props","map","item","display","marginRight","padding","connect","app","build","horizontal","Components_results","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.278b2c7e.chunk.js","sourcesContent":["import {  createStore} from 'redux'\r\nimport reducer from './reducer'\r\n\r\n\r\nconst store = createStore(reducer)\r\n\r\nexport default store","import {REQUEST, RESULT_RECIEVED} from './actions'\r\nexport default (state = {request: false, result:[]}, action) => {\r\n    switch (action.type) {\r\n      case REQUEST:\r\n        console.log(\"aa gaya !!\")\r\n        return {\r\n          ...state,\r\n          request: true,\r\n          result:[]\r\n        };\r\n      case RESULT_RECIEVED:\r\n        return {\r\n            ...state,\r\n            request: false,\r\n            result: action.payload\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  ","export const REQUEST = 'REQUEST_SENT'\r\nexport const RESULT_RECIEVED = 'RESULT_RECIEVED'","import axios from 'axios';\r\nimport store from '../datastore/store';\r\nimport {REQUEST, RESULT_RECIEVED} from '../datastore/actions'\r\nexport default (n)=>{\r\n    var baseUrl = 'http://localhost:5000/'\r\n    store.dispatch({type:REQUEST});\r\n    axios({\r\n        method: 'post',\r\n        url: baseUrl + 'frequency',\r\n        headers: {}, \r\n        data: {\r\n          'n': n \r\n        }\r\n      })\r\n      .then((res)=>{\r\n          store.dispatch({type:RESULT_RECIEVED, payload:res.data.result});\r\n      })\r\n      .catch((err)=>{\r\n          console.log(err)\r\n      })\r\n}","import React, {Component} from 'react'\r\nimport './main.css'\r\nimport api from '../API/apis'\r\n\r\nclass inputs extends Component{\r\n    constructor(){\r\n        super()\r\n        this.input = React.createRef();\r\n        this.state={\r\n            value: true\r\n        }\r\n    }\r\n    submit = () =>{\r\n        if(this.input.current.value && /^[0-9]+$/.test(this.input.current.value) ){\r\n            this.setState({value:true})\r\n            api(this.input.current.value)\r\n        }\r\n        else{\r\n            this.setState({value:false})\r\n            }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='container' style={{marginTop:'3%'}}>\r\n            <span style={{marginTop:'40%'}}>\r\n                <h1 className='typo'>Number of top words</h1>\r\n                <input type='text' ref={this.input} className='container'  style={{marginBottom:'2%', width:'5vw', minHeight:'5vh',fontSize:'150%', background:'#fdfdfd', border:'1px solid #000', textAlign:'center'}}/>\r\n                <button className='bu' onClick={this.submit}>Go</button>\r\n            </span>\r\n            {!this.state.value && \r\n                <div style={{ marginLeft:'36%',paddingLeft:'2%', paddingRight:'2%', width:'fit-content',borderRadius:'20px', background:'#f9bab6', color:'#f74336'}}>\r\n                 <h2 className='typo'>Enter Correct value</h2>\r\n                </div>\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default inputs;","import React from 'react'\r\nimport Loader from 'react-loader-spinner'\r\n\r\n\r\nexport default  ()=>{\r\n    return(\r\n        <Loader \r\n         type=\"Grid\"\r\n         color=\"#000\"\r\n         height=\"100\"\t\r\n         width=\"100\"\r\n      />  \r\n    )\r\n};","import React, {Component} from 'react'\r\nimport Loader from './loader'\r\nimport { connect } from 'react-redux';\r\nimport './main.css'\r\n\r\nclass results extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className='container' style={{marginTop:'3%'}}>\r\n            <h1 className='typo'>Results</h1>\r\n            {this.props.request && \r\n                <Loader style={{marginBottom:'5%'}}/>\r\n            }\r\n            {\r\n                this.props.result.length>0 &&\r\n                this.props.result.map((item)=>(\r\n                    <div className='smcontainer'>\r\n                        <span><h1 className='typo' style={{display:'inline'}}>{item[0]}</h1>\r\n                              <h1 className='typo' style={{ marginRight:'0px',display:'inline', marginLeft:'5%', padding:'0px 10px 0px 10px', background:'#d1d1d1', borderRadius:'25px'}}>{item[1]}</h1>\r\n                        </span>\r\n                    </div>\r\n                ))\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return state\r\n}\r\nexport default connect(mapStateToProps)(results);","import React, {Component} from 'react';\nimport './App.css';\nimport Input from './Components/input'\nimport Result from './Components/results'\nimport {Column} from 'simple-flexbox'\nclass app extends Component{\n  render(){\n      return (\n        <div className=\"App\">\n        <Column horizontal='center'>\n        <Input/>\n        <Result/>\n        </Column>\n        </div>\n    );\n  }\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './datastore/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={ store }><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}